---
- name: Set up Docker, Jenkins, and SonarQube using Docker
  hosts: servers
  become: yes
  tasks:

    - name: Create directory for Jenkins Dockerfile
      file:
        path: /home/azureuser/jenkins
        state: directory
        mode: '0755'

    # 1. Install required packages for Docker installation
    - name: Install prerequisites for Docker
      apt:
        name:
          - ca-certificates
          - curl
          - lsb-release
        state: present
        update_cache: yes

    # 2. Add Docker's official GPG key
    - name: Create apt keyring directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'

    # 3. Add the Docker repository to Apt sources
    - name: Add Docker repository to sources.list
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Update apt sources
      apt:
        update_cache: yes

    # 4. Install Docker
    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    # 5. Start and enable Docker service
    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    # 6. Create Docker network for Jenkins and SonarQube
    - name: Create Docker network for Jenkins and SonarQube
      docker_network:
        name: jenkins-net
        state: present

    # 7. Copy the Dockerfile to the VM (Adjust path as needed)
    - name: Copy Dockerfile to VM
      copy:
        src: /home/tushar/Dockerfile   # Replace with the correct local path
        dest: /home/azureuser/jenkins/Dockerfile

    # 8. Build Jenkins Docker image locally
    - name: Build Jenkins Docker image from Dockerfile
      command: docker build -t docker-jenkins /home/azureuser/jenkins
      args:
        chdir: /home/azureuser/jenkins

    # 9. Run Jenkins container
    - name: Run Jenkins container
      docker_container:
        name: my-jenkins
        image: docker-jenkins
        state: started
        restart_policy: always
        exposed_ports:
          - "8080"
        published_ports:
          - "8080:8080"
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
          - "jenkins_home:/var/jenkins_home"
          - "/opt/monitoring-configs:/opt/monitoring-configs"
        networks:
          - name: jenkins-net
        user: root

    # 10. Run SonarQube container
    - name: Run SonarQube container
      docker_container:
        name: sonarqube
        image: sonarqube:community
        state: started
        restart_policy: always
        exposed_ports:
          - "9000"
        published_ports:
          - "9000:9000"
        volumes:
          - "sonarqube_data:/opt/sonarqube/data"
          - "sonarqube_extensions:/opt/sonarqube/extensions"
          - "sonarqube_logs:/opt/sonarqube/logs"
        networks:
          - name: jenkins-net

    # 11. Create config and data directories for Prometheus and Grafana
    - name: Create config and data directories for Prometheus and Grafana
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /opt/monitoring-configs
        - /opt/prometheus-data
        - /opt/grafana-data
        - /opt/grafana-provisioning/datasources


    # 12. Copy base prometheus.yml (with {{target}} placeholder) to the VM
    - name: Copy Prometheus base config to target
      copy:
        src: /home/tushar/prometheus.yml  # replace with actual local path
        dest: /opt/monitoring-configs/prometheus.yml
        mode: '0644'

    # 13. Copy Grafana provisioning config to VM (Prometheus data source)
    - name: Copy Grafana datasource provisioning config
      copy:
        src: /home/tushar/prometheus-datasource.yml  # replace with actual local path
        dest: /opt/grafana-provisioning/datasources/prometheus.yml
        mode: '0644'

    - name: Set correct permissions for Grafana data directory
      file:
        path: /opt/grafana-data
        state: directory
        owner: 472
        group: 472
        mode: '0755'
        recurse: yes

    - name: Ensure Prometheus data directory exists
      file:
        path: /opt/prometheus-data
        state: directory
        owner: 65534
        group: 65534
        mode: '0755'

    # 14. Run Prometheus container
    - name: Run Prometheus container
      docker_container:
        name: prometheus
        image: prom/prometheus
        state: started
        restart_policy: always
        exposed_ports:
          - "9090"
        published_ports:
          - "9090:9090"
        volumes:
          - "/opt/monitoring-configs/prometheus.yml:/etc/prometheus/prometheus.yml"
          - "/opt/prometheus-data:/prometheus"
        networks:
          - name: jenkins-net

    # 15. Run Grafana container
    - name: Run Grafana container
      docker_container:
        name: grafana
        image: grafana/grafana
        state: started
        restart_policy: always
        exposed_ports:
          - "3000"
        published_ports:
          - "3000:3000"
        volumes:
          - "/opt/grafana-data:/var/lib/grafana"
          - "/opt/grafana-provisioning:/etc/grafana/provisioning"
        networks:
          - name: jenkins-net